{"version":3,"sources":["components/InfoBox.js","util.js","components/Map.js","components/Table.js","components/LineGraph.js","App.js","index.js"],"names":["InfoBox","props","total","Card","className","CardContent","Typography","color","title","start","end","cases","duration","seperator","caseTypesColors","hex","rgb","half_op","multiplier","recovered","deaths","sortData","data","sortedData","sort","a","b","Map","countries","center","zoom","useState","caseType","setCaseType","FormControl","Select","variant","value","onChange","e","target","MenuItem","TileLayer","url","attribution","casesType","map","country","Circle","countryInfo","lat","long","fillOpacity","fillColor","radius","Math","sqrt","Popup","showDataOnMap","Table","LineGraph","useEffect","fetch","then","res","json","chartData","buildChartData","setData","options","legend","display","elements","point","raduis","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","numeral","format","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","lastDataPoint","date","newDataPoint","x","y","push","length","datasets","backgroundColor","borderColor","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","countryList","name","iso2","console","log","getCountries","onCountryChange","event","countryCode","item","key","todayCases","todayRecovered","todayDeaths","tests","testsPerOneMillion","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.eb4ff757.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Card, CardContent, Typography } from \"@material-ui/core\";\r\nimport Countup from \"react-countup\";\r\nfunction InfoBox(props) {\r\n\r\n    if(!props.total){\r\n      \r\n        return 'loading';\r\n        \r\n    }\r\n  return (\r\n    <Card className=\"infobox\">\r\n      <CardContent>\r\n        <Typography className=\"infobox_title\" color=\"textSecondary\">\r\n          {props?.title}\r\n        \r\n        </Typography>\r\n\r\n        <h2 className=\"infobox_cases\">\r\n          <Countup start={0} end={props?.cases} duration={2.5} seperator=\",\" />\r\n        </h2>\r\n\r\n        <Typography className=\"infobox_total\" color=\"textSecondary\">\r\n          <Countup start={0} end={props?.total} duration={2.5} seperator=\",\" />{\" \"}\r\n          Total\r\n        </Typography>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default InfoBox;\r\n","import React from 'react'\r\nimport numeral from 'numeral'\r\nimport {Circle,Popup} from 'react-leaflet'\r\n\r\n\r\nconst caseTypesColors={\r\n    cases:{\r\n        hex:'#CC0134',\r\n        rgb:'rgb(204,16,52)',\r\n        half_op:\"rgba(204,16,52,0.5)\",\r\n        multiplier:800,\r\n    },\r\n    recovered:{\r\n        hex:'#7dd71d',\r\n        rgb:'rgb(125,21,29)',\r\n        half_op:\"rgba(126,21,29,0.5)\",\r\n        multiplier:1200,\r\n    },\r\n\r\n    deaths:{\r\n        hex:'#fb4443',\r\n        rgb:'rgb(251,60,67)',\r\n        half_op:\"rgba(252,60,67,0.5)\",\r\n        multiplier:2000,\r\n    },\r\n}\r\n\r\n\r\n\r\nexport const sortData = (data)=>{\r\n\r\n    const sortedData = [...data]\r\n\r\n    sortedData.sort((a,b)=>{\r\n        if(a.cases>b.cases){\r\n            return -1\r\n        }\r\n        else{\r\n            return 1\r\n        }\r\n    });\r\n\r\n    return sortedData;\r\n}\r\n\r\nexport const showDataOnMap = (data,casesType='cases')=>(\r\n    data.map(country=>(\r\n        <Circle\r\n        center={[country.countryInfo.lat, country.countryInfo.long]}\r\n        fillOpacity={0.4}\r\n        color={caseTypesColors[casesType].hex}\r\n        fillColor={caseTypesColors[casesType].hex}\r\n\r\n        radius={\r\n            Math.sqrt(country[casesType]) * caseTypesColors[casesType].multiplier\r\n        }\r\n        >\r\n            <Popup>\r\n    <h1>Total {casesType} : {country[casesType]}</h1>\r\n            </Popup>\r\n\r\n        </Circle>\r\n\r\n    ))\r\n)","import React,{useState} from 'react'\r\nimport './Map.css'\r\nimport {Map as LeadlerMap, TileLayer} from 'react-leaflet'\r\nimport {showDataOnMap} from '../util'\r\nimport { MenuItem, FormControl, Select } from \"@material-ui/core\";\r\nfunction Map({countries, center,zoom}) {\r\n\r\n    const [caseType,setCaseType] = useState('cases')\r\n    const onChangeCase=(e)=>{\r\n        setCaseType(e.target.value)\r\n    }\r\n    return (\r\n        <div className = \"map\">\r\n                <div className=\"map_form\">\r\n                    <FormControl  >\r\n                            <Select variant=\"outlined\" value={caseType} onChange={onChangeCase}>\r\n                            <MenuItem value=\"cases\">Cases</MenuItem>\r\n                            <MenuItem value=\"deaths\">Deaths</MenuItem>\r\n                            <MenuItem value=\"recovered\">Recovered</MenuItem>\r\n\r\n                            </Select>\r\n\r\n                    </FormControl>\r\n\r\n                </div>\r\n\r\n                <LeadlerMap center={center} zoom={zoom}>\r\n                    <TileLayer\r\n                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                    attribution='&copy; <a href = \"http://osm.org/copyright\">\r\n                    OpenStreetMap</a> contributors'\r\n                    />\r\n\r\n\r\n                        {showDataOnMap(countries,caseType)}\r\n                </LeadlerMap>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Map\r\n","import React from 'react'\r\nimport \"./table.css\"\r\nfunction Table({countries}) {\r\n    return (\r\n        <div className = \"table\">\r\n            {countries.map(({country,cases})=>(\r\n                <tr>\r\n                    <td>{country}</td>\r\n            <td>{cases}</td>\r\n                </tr>\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Table\r\n","import React,{useState,useEffect} from 'react'\r\nimport {Line} from 'react-chartjs-2'\r\nimport numeral from 'numeral'\r\nfunction LineGraph({casesType=\"cases\"}) {\r\n\r\n    useEffect(()=>{\r\n            fetch('https://disease.sh/v3/covid-19/historical/all?lastdays=120')\r\n            .then(res=>res.json())\r\n            .then(data=>{\r\n                    const chartData = buildChartData(data)\r\n                    setData(chartData)\r\n            })\r\n    },[casesType])\r\n\r\nconst [data,setData] = useState({})\r\nconst options = {\r\n    legend:{\r\n        display:false,\r\n    },\r\n    elements:{\r\n        point:{\r\n            raduis:0,\r\n        },\r\n    },\r\n    maintainAspectRatio:false,\r\n    tooltips:{\r\n        mode:\"index\",\r\n        intersect:false,\r\n        callbacks:{\r\n            label: function(tooltipItem,data){\r\n                return numeral(tooltipItem.value).format(\"+0,0\")\r\n            },\r\n        },\r\n    },\r\n    scales:{\r\n        xAxes:[\r\n            {\r\n                type:\"time\",\r\n                time:{\r\n                    format:\"MM/DD/YY\",\r\n                    tooltipFormat:\"ll\"\r\n                },\r\n            },\r\n        ],\r\n        yAxes:[\r\n            {\r\n                gridLines:{\r\n                    display:false\r\n                },\r\n                ticks:{\r\n                    callback: function(value,index,values){\r\n                        return numeral(value).format(\"0a\")\r\n                    }\r\n                }\r\n            }\r\n        ]\r\n    }\r\n}\r\nconst buildChartData = (data,casesType=\"cases\")=>{\r\n    const chartData = [];\r\n    let lastDataPoint;\r\n\r\n   for(let date in data.cases){\r\n        if(lastDataPoint){\r\n            const newDataPoint={\r\n                x:date,\r\n                y:data[casesType][date] - lastDataPoint\r\n            }\r\n            chartData.push(newDataPoint)\r\n        }\r\n        lastDataPoint = data[casesType][date];\r\n    }\r\n    return chartData;\r\n};\r\n    return (\r\n        <div>\r\n            {data.length>0 && \r\n            <Line\r\n            options={options}\r\n            data={{\r\n                 datasets:[\r\n                     {\r\n                         backgroundColor:\"rgba(204,16,15,0.5)\",\r\n                         borderColor:\"black\",\r\n                         data:data\r\n                     }\r\n                 ]\r\n            }}/>}\r\n           \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LineGraph\r\n","import React,{useState,useEffect} from \"react\";\nimport { MenuItem, FormControl, Select } from \"@material-ui/core\";\nimport \"./App.css\";\nimport InfoBox from './components/InfoBox'\nimport Map from \"./components/Map\";\nimport {Card,CardContent,} from '@material-ui/core'\nimport Table from './components/Table'\nimport {sortData} from './util'\nimport LineGraph from './components/LineGraph'\nimport \"leaflet/dist/leaflet.css\"\n//https://disease.sh/v3/covid-19/countires\nfunction App() {\n  const [countries,setCountries] = useState([])\n  const [country,setCountry] = useState('worldwide');\n  const [countryInfo,setCountryInfo] = useState({})\n  const [tableData,setTableData] = useState([])\n  const [mapCenter,setMapCenter] = useState({lat:34, lng:-40})\n  const [mapZoom,setMapZoom] = useState(3)\n  const [mapCountries,setMapCountries] = useState([])\n  useEffect(()=>{\n\n      fetch('https://disease.sh/v3/covid-19/all')\n      .then(res=>res.json())\n        .then(data=>{\n          setCountryInfo(data)\n        })\n      const getCountries = async()=>{\n\n        await fetch('https://disease.sh/v3/covid-19/countries')\n        .then(res=>res.json())\n        .then(data=>{\n          const countryList = data.map((country)=>(\n            {\n              name: country.country,\n              value:country.countryInfo.iso2\n            }\n          ));\n          const sortedData = sortData(data)\n          setTableData(sortedData)\n          setMapCountries(data)\n          console.log(data)\n          setCountries(countryList)\n        })\n        \n      }\n      getCountries();\n  },[])\n\n  const onCountryChange = async(event)=>{\n    const countryCode = event.target.value;\n    \n\n    const url = countryCode ===\"worldwide\" ? 'https://disease.sh/v3/covid-19/all':\n    `https://disease.sh./v3/covid-19/countries/${countryCode}`\n\n    await fetch(url)\n    .then(res=>res.json())\n    .then(data=>{\n        setCountryInfo(data)\n        setCountry(countryCode)\n        console.log(data)\n        setMapCenter([data.countryInfo.lat,data.countryInfo.long])\n        setMapZoom(5)\n    })\n\n  }\n\n  return (\n    <div className=\"app\">\n      <div className=\"app_left\">\n   \n      <div className=\"app_header\">\n        <h1>COVID 19 TRACKER</h1>\n     \n        <FormControl className=\"app_dropdown\">\n          <Select onChange={onCountryChange} variant=\"outlined\" value={country}>\n\n            <MenuItem value=\"worldwide\">World Wide</MenuItem>\n          {countries.map(item=>(\n            <MenuItem key={item.name} value= {item.value}>{item.name}</MenuItem>\n          ))}\n          </Select>\n        </FormControl>\n      </div>\n      {/* Finishing Header */}\n\n      {/* Starting Stats */}\n            <div className=\"app_stats\">\n                <InfoBox \n                title=\"Coronavirus Cases\" total={countryInfo?.cases} cases={countryInfo.todayCases}/>\n            {console.log(countryInfo.cases)}\n                <InfoBox \n                title=\"Recovered\" total={countryInfo.recovered} cases={countryInfo.todayRecovered}/>\n                <InfoBox \n                title=\"Deaths\" total={countryInfo.deaths} cases={countryInfo.todayDeaths}/>\n                <InfoBox\n                title=\"Tests\" total={countryInfo?.tests} cases ={countryInfo?.testsPerOneMillion}\n                />\n            </div>\n           <Map \n           countries = {mapCountries}\n           center={mapCenter}\n           zoom={mapZoom}/>\n              </div>\n\n              <Card className=\"app_right\">\n                <CardContent>\n                  <h1>Live Cases By Country</h1>\n                    <Table countries = {tableData}/>\n\n                  <h1>Worldwide New Cases</h1>\n                  <LineGraph/>\n                </CardContent>\n              </Card>\n\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n \n    <App />\n,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\n"],"sourceRoot":""}